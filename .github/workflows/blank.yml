name: Kernel Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: true
        
    - name: cloning
      run: |
        git clone https://github.com/jujuneed1999/android_kernel_xiaomi_msm8953.git kernel
        cd kernel
    - name: init submodules
      run: |
        git submodule init && git submodule update
        export KERNEL_ROOT="$(pwd)"
        export HOME="$(pwd)"
        export ARCH=arm64
        export KBUILD_BUILD_USER="@juneed"

    - name: Install the requirements for building the kernel when running the script for the first time
      run: |
        if [ ! -f ".requirements" ]; then
            sudo apt update && sudo apt install -y git device-tree-compiler lz4 xz-utils zlib1g-dev openjdk-17-jdk gcc g++ python3 python-is-python3 p7zip-full android-sdk-libsparse-utils erofs-utils \
                default-jdk git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses-dev libx11-dev libreadline-dev libgl1 libgl1-mesa-dev \
                python3 make sudo gcc g++ bc grep tofrodos python3-markdown libxml2-utils xsltproc zlib1g-dev python-is-python3 libc6-dev libtinfo6 \
                make repo cpio kmod openssl libelf-dev pahole libssl-dev binutils libarchive-tools zstd --fix-missing && wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb && sudo dpkg -i libtinfo5_6.3-2ubuntu0.1_amd64.deb && touch .requirements
        fi

    - name: Create necessary directories
      run: |
        sudo mkdir -p "${KERNEL_ROOT}/out" "${KERNEL_ROOT}/build" "${HOME}/toolchains"

    - name: init clang-r353983c
      run: |
        if [ ! -d "${HOME}/toolchains/clang-r353983c" ]; then
            echo -e "\n[INFO] Cloning clang-r353983c...\n"
            mkdir -p "${HOME}/toolchains/clang-r353983c" && cd "${HOME}/toolchains/clang-r353983c"
            curl -LO "https://github.com/ravindu644/Android-Kernel-Tutorials/releases/download/toolchains/clang-r353983c.tar.gz"
            tar -xf clang-r353983c.tar.gz && rm clang-r353983c.tar.gz
            cd "${KERNEL_ROOT}"
        fi

    - name: init arm gnu toolchain
      run: |
        if [ ! -d "${HOME}/toolchains/gcc" ]; then
            echo -e "\n[INFO] Cloning ARM GNU Toolchain\n"
            mkdir -p "${HOME}/toolchains/gcc" && cd "${HOME}/toolchains/gcc"
            curl -LO "https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz"
            tar -xf arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
            cd "${KERNEL_ROOT}"
        fi

    - name: Export toolchain paths
      run: |
        export PATH="${PATH}:${HOME}/toolchains/clang-r353983c/bin"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${HOME}/toolchains/clang-r353983c/lib64"

    - name: Set cross-compile environment variables
      run: |
        export BUILD_CROSS_COMPILE="${HOME}/toolchains/gcc/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-"
        export BUILD_CC="${HOME}/toolchains/clang-r353983c/bin/clang"

    - name: Build options for the kernel
      run: |
        export BUILD_OPTIONS="
        -C ${KERNEL_ROOT} \
        O=${KERNEL_ROOT}/out \
        -j$(nproc) \
        ARCH=arm64 \
        CROSS_COMPILE=${BUILD_CROSS_COMPILE} \
        CC=${BUILD_CC} \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        "

    - name: check pwd
      run: |
        pwd

    - name: check ls
      run: |
        ls
        
    - name: build
      run: |
        build_kernel(){
            # Make default configuration.
            # Replace 'your_defconfig' with the name of your kernel's defconfig
            make ${BUILD_OPTIONS} lineage_tiffany_defconfig
            # Configure the kernel (GUI)
            make ${BUILD_OPTIONS} menuconfig
            # Build the kernel
            make ${BUILD_OPTIONS} Image || exit 1
            # Copy the built kernel to the build directory
            cp "${KERNEL_ROOT}/out/arch/arm64/boot/Image" "${KERNEL_ROOT}/build"
            echo -e "\n[INFO]: BUILD FINISHED..!"
        }
        build_kernel
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: build/Image
